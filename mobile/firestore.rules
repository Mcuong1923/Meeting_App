// PASTE RULES TỪ FIREBASE CONSOLE VÀO ĐÂY
// Copy toàn bộ code từ Firebase Console editor và paste vào đây 

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions để kiểm tra quyền
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    // Cập nhật function phù hợp với enum UserRole
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }
    
    function isDirector() {
      return isAuthenticated() && getUserRole() == 'director';
    }
    
    function isManager() {
      return isAuthenticated() && getUserRole() == 'manager';
    }
    
    function isEmployee() {
      return isAuthenticated() && getUserRole() == 'employee';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Backward compatibility - Admin là quyền cao nhất
    function isSuperAdmin() {
      return isAdmin();
    }

    // Rules cho collection users
    match /users/{userId} {
      // Đọc: User có thể đọc thông tin của chính mình, Admin có thể đọc tất cả
      allow read: if isOwner(userId) || isAdmin() || isDirector();
      
      // Tạo: User có thể tạo thông tin của chính mình
      allow create: if isOwner(userId) && isAuthenticated();
      
      // Cập nhật: User có thể cập nhật thông tin cá nhân, Admin và Director có thể thay đổi role
      allow update: if isAuthenticated() && 
        (
          // Admin và Director có thể update bất kỳ user nào
          (isAdmin() || isDirector()) ||
          // User có thể update hồ sơ cá nhân + gửi yêu cầu role (pendingRole, pendingDepartment)
          (isOwner(userId) && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'isRoleApproved', 'departmentId']))
        );
      
      // Xóa: Admin có thể xóa bất kỳ user nào, Director có thể xóa user trong department mình
      allow delete: if isAdmin() || 
        (isDirector() && 
         get(/databases/$(database)/documents/users/$(userId)).data.departmentId == 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.departmentId);
    }

    // Rules cho collection meetings
    match /meetings/{meetingId} {
      // Đọc: Tất cả authenticated user có thể đọc meetings
      allow read: if isAuthenticated();
      
      // Tạo: Employee trở lên có thể tạo meeting
      allow create: if isAuthenticated() && 
        (isEmployee() || isManager() || isDirector() || isAdmin());
      
      // Cập nhật: Creator, Manager trở lên có thể cập nhật
      allow update: if isAuthenticated() && 
        (
          isOwner(resource.data.createdBy) ||
          isManager() || isDirector() || isAdmin()
        );
      
      // Xóa: Creator, Director trở lên có thể xóa
      allow delete: if isAuthenticated() && 
        (
          isOwner(resource.data.createdBy) ||
          isDirector() || isAdmin()
        );
    }

    // Rules cho collection rooms
    match /rooms/{roomId} {
      // Đọc: Tất cả authenticated user có thể đọc rooms
      allow read: if isAuthenticated();
      
      // Tạo: Manager trở lên có thể tạo room
      allow create: if isAuthenticated() && 
        (isManager() || isDirector() || isAdmin());
      
      // Cập nhật: Manager trở lên có thể cập nhật room
      allow update: if isAuthenticated() && 
        (isManager() || isDirector() || isAdmin());
      
      // Xóa: Director trở lên có thể xóa room
      allow delete: if isAuthenticated() && 
        (isDirector() || isAdmin());
    }

    // Rules cho collection departments
    match /departments/{departmentId} {
      // Đọc: Tất cả authenticated user có thể đọc departments
      allow read: if isAuthenticated();
      
      // Tạo, cập nhật, xóa: Chỉ Director trở lên
      allow write: if isAuthenticated() && 
        (isDirector() || isAdmin());
    }

    // Rules cho collection notifications
    match /notifications/{notificationId} {
      // Đọc: User chỉ có thể đọc notification của mình hoặc Admin có thể đọc tất cả
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isAdmin());
      
      // Tạo: System hoặc Manager trở lên có thể tạo notification
      allow create: if isAuthenticated() && 
        (isManager() || isDirector() || isAdmin());
      
      // Cập nhật: User có thể cập nhật notification của mình (đánh dấu đã đọc)
      allow update: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isAdmin());
      
      // Xóa: User có thể xóa notification của mình, Admin có thể xóa tất cả
      allow delete: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isAdmin());
    }

    // Rules cho collection reports
    match /reports/{reportId} {
      // Đọc: Manager trở lên có thể đọc reports
      allow read: if isAuthenticated() && 
        (isManager() || isDirector() || isAdmin());
      
      // Tạo, cập nhật: Director trở lên có thể quản lý reports
      allow write: if isAuthenticated() && 
        (isDirector() || isAdmin());
      
      // Xóa: Chỉ Admin có thể xóa reports
      allow delete: if isAdmin();
    }

    // Rules cho collection maintenance_records
    match /maintenance_records/{recordId} {
      // Đọc: Manager trở lên có thể đọc maintenance records
      allow read: if isAuthenticated() && 
        (isManager() || isDirector() || isAdmin());
      
      // Tạo, cập nhật: Director trở lên có thể quản lý maintenance
      allow write: if isAuthenticated() && 
        (isDirector() || isAdmin());
      
      // Xóa: Chỉ Admin có thể xóa maintenance records
      allow delete: if isAdmin();
    }

    // Rules mặc định: Từ chối tất cả các truy cập khác
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 