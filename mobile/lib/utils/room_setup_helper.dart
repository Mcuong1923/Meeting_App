import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/room_model.dart';
import '../models/user_model.dart';

class RoomSetupHelper {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// T·∫°o ph√≤ng h·ªçp m·∫´u cho h·ªá th·ªëng
  static Future<void> setupDefaultRooms(UserModel currentUser) async {
    try {
      print('üèóÔ∏è B·∫Øt ƒë·∫ßu setup ph√≤ng h·ªçp m·∫∑c ƒë·ªãnh...');

      // Ki·ªÉm tra quy·ªÅn
      if (!currentUser.isAdmin && !currentUser.isDirector) {
        throw Exception('B·∫°n kh√¥ng c√≥ quy·ªÅn setup ph√≤ng h·ªçp');
      }

      // Ki·ªÉm tra ƒë√£ c√≥ ph√≤ng ch∆∞a
      QuerySnapshot existingRooms =
          await _firestore.collection('rooms').limit(1).get();
      if (existingRooms.docs.isNotEmpty) {
        print('‚ö†Ô∏è ƒê√£ c√≥ ph√≤ng trong h·ªá th·ªëng, b·ªè qua setup m·∫∑c ƒë·ªãnh');
        return;
      }

      List<RoomModel> defaultRooms = _getDefaultRoomTemplates(currentUser);

      int createdCount = 0;
      for (RoomModel room in defaultRooms) {
        try {
          await _firestore.collection('rooms').doc(room.id).set(room.toMap());
          print('‚úÖ ƒê√£ t·∫°o ph√≤ng: ${room.name}');
          createdCount++;
        } catch (e) {
          print('‚ùå L·ªói t·∫°o ph√≤ng ${room.name}: $e');
        }
      }

      print('üéâ Ho√†n th√†nh! ƒê√£ t·∫°o $createdCount ph√≤ng m·∫∑c ƒë·ªãnh');
    } catch (e) {
      print('‚ùå L·ªói setup ph√≤ng m·∫∑c ƒë·ªãnh: $e');
      rethrow;
    }
  }

  /// L·∫•y danh s√°ch template ph√≤ng m·∫∑c ƒë·ªãnh
  static List<RoomModel> _getDefaultRoomTemplates(UserModel currentUser) {
    DateTime now = DateTime.now();

    return [
      // Ph√≤ng h·ªçp nh·ªè
      RoomModel(
        id: 'room_small_01',
        name: 'Ph√≤ng h·ªçp A1',
        description:
            'Ph√≤ng h·ªçp nh·ªè d√†nh cho 4-6 ng∆∞·ªùi, th√≠ch h·ª£p cho cu·ªôc h·ªçp team',
        location: 'C·∫°nh thang m√°y ch√≠nh',
        floor: '1',
        building: 'T√≤a A',
        capacity: 6,
        status: RoomStatus.available,
        amenities: [
          RoomAmenity.wifi,
          RoomAmenity.whiteboard,
          RoomAmenity.monitor,
          RoomAmenity.airConditioner,
          RoomAmenity.powerOutlet,
        ],
        qrCode: 'ROOM_A1_001',
        area: 15.0,
        photoUrl: '',
        photos: [],
        settings: {
          'preferredTemperature': 24,
          'lightingLevel': 'medium',
          'soundProofing': true,
        },
        createdAt: now,
        updatedAt: now,
        createdBy: currentUser.id,
        updatedBy: currentUser.id,
        isActive: true,
        additionalData: {
          'roomType': 'small_meeting',
          'isTemplate': false,
          'setupBy': 'system_default',
        },
      ),

      // Ph√≤ng h·ªçp trung b√¨nh
      RoomModel(
        id: 'room_medium_01',
        name: 'Ph√≤ng h·ªçp B1',
        description:
            'Ph√≤ng h·ªçp trung b√¨nh cho 8-12 ng∆∞·ªùi, c√≥ ƒë·∫ßy ƒë·ªß thi·∫øt b·ªã thuy·∫øt tr√¨nh',
        location: 'Cu·ªëi h√†nh lang',
        floor: '2',
        building: 'T√≤a A',
        capacity: 12,
        status: RoomStatus.available,
        amenities: [
          RoomAmenity.wifi,
          RoomAmenity.projector,
          RoomAmenity.whiteboard,
          RoomAmenity.microphone,
          RoomAmenity.speaker,
          RoomAmenity.airConditioner,
          RoomAmenity.powerOutlet,
          RoomAmenity.videoConference,
        ],
        qrCode: 'ROOM_B1_002',
        area: 30.0,
        photoUrl: '',
        photos: [],
        settings: {
          'preferredTemperature': 23,
          'lightingLevel': 'high',
          'soundProofing': true,
          'projectorType': 'HD',
        },
        createdAt: now,
        updatedAt: now,
        createdBy: currentUser.id,
        updatedBy: currentUser.id,
        isActive: true,
        additionalData: {
          'roomType': 'medium_meeting',
          'isTemplate': false,
          'setupBy': 'system_default',
        },
      ),

      // Ph√≤ng h·ªôi th·∫£o l·ªõn
      RoomModel(
        id: 'room_large_01',
        name: 'H·ªôi tr∆∞·ªùng C1',
        description:
            'H·ªôi tr∆∞·ªùng l·ªõn cho 50+ ng∆∞·ªùi, th√≠ch h·ª£p cho h·ªôi th·∫£o v√† s·ª± ki·ªán',
        location: 'T·∫ßng tr·ªát, c·∫°nh s·∫£nh ch√≠nh',
        floor: '1',
        building: 'T√≤a C',
        capacity: 80,
        status: RoomStatus.available,
        amenities: [
          RoomAmenity.wifi,
          RoomAmenity.projector,
          RoomAmenity.microphone,
          RoomAmenity.speaker,
          RoomAmenity.camera,
          RoomAmenity.monitor,
          RoomAmenity.airConditioner,
          RoomAmenity.powerOutlet,
          RoomAmenity.videoConference,
          RoomAmenity.waterDispenser,
        ],
        qrCode: 'ROOM_C1_003',
        area: 120.0,
        photoUrl: '',
        photos: [],
        settings: {
          'preferredTemperature': 22,
          'lightingLevel': 'high',
          'soundProofing': true,
          'audioSystem': 'professional',
          'seatArrangement': 'theater',
        },
        createdAt: now,
        updatedAt: now,
        createdBy: currentUser.id,
        updatedBy: currentUser.id,
        isActive: true,
        additionalData: {
          'roomType': 'large_conference',
          'isTemplate': false,
          'setupBy': 'system_default',
        },
      ),

      // Ph√≤ng training
      RoomModel(
        id: 'room_training_01',
        name: 'Ph√≤ng ƒë√†o t·∫°o D1',
        description:
            'Ph√≤ng ƒë√†o t·∫°o v·ªõi b√†n gh·∫ø linh ho·∫°t, th√≠ch h·ª£p cho workshop',
        location: 'G·∫ßn khu v·ª±c ngh·ªâ ng∆°i',
        floor: '3',
        building: 'T√≤a D',
        capacity: 20,
        status: RoomStatus.available,
        amenities: [
          RoomAmenity.wifi,
          RoomAmenity.projector,
          RoomAmenity.whiteboard,
          RoomAmenity.flipChart,
          RoomAmenity.microphone,
          RoomAmenity.speaker,
          RoomAmenity.airConditioner,
          RoomAmenity.powerOutlet,
          RoomAmenity.waterDispenser,
        ],
        qrCode: 'ROOM_D1_004',
        area: 50.0,
        photoUrl: '',
        photos: [],
        settings: {
          'preferredTemperature': 24,
          'lightingLevel': 'bright',
          'soundProofing': false,
          'seatArrangement': 'classroom',
          'movableFurniture': true,
        },
        createdAt: now,
        updatedAt: now,
        createdBy: currentUser.id,
        updatedBy: currentUser.id,
        isActive: true,
        additionalData: {
          'roomType': 'training',
          'isTemplate': false,
          'setupBy': 'system_default',
        },
      ),

      // Ph√≤ng h·ªçp VIP
      RoomModel(
        id: 'room_vip_01',
        name: 'Ph√≤ng h·ªçp VIP',
        description:
            'Ph√≤ng h·ªçp cao c·∫•p d√†nh cho kh√°ch VIP v√† cu·ªôc h·ªçp quan tr·ªçng',
        location: 'T·∫ßng cao nh·∫•t',
        floor: '10',
        building: 'T√≤a A',
        capacity: 8,
        status: RoomStatus.available,
        amenities: [
          RoomAmenity.wifi,
          RoomAmenity.projector,
          RoomAmenity.monitor,
          RoomAmenity.microphone,
          RoomAmenity.speaker,
          RoomAmenity.camera,
          RoomAmenity.airConditioner,
          RoomAmenity.powerOutlet,
          RoomAmenity.videoConference,
          RoomAmenity.waterDispenser,
        ],
        qrCode: 'ROOM_VIP_005',
        area: 40.0,
        photoUrl: '',
        photos: [],
        settings: {
          'preferredTemperature': 23,
          'lightingLevel': 'premium',
          'soundProofing': true,
          'furnitureType': 'executive',
          'privacyLevel': 'high',
        },
        createdAt: now,
        updatedAt: now,
        createdBy: currentUser.id,
        updatedBy: currentUser.id,
        isActive: true,
        additionalData: {
          'roomType': 'vip_meeting',
          'isTemplate': false,
          'setupBy': 'system_default',
        },
      ),

      // Ph√≤ng b·∫£o tr√¨ (ƒë·ªÉ demo)
      RoomModel(
        id: 'room_maintenance_demo',
        name: 'Ph√≤ng h·ªçp E1 (Demo b·∫£o tr√¨)',
        description:
            'Ph√≤ng demo tr·∫°ng th√°i b·∫£o tr√¨ - c·∫ßn s·ª≠a ch·ªØa h·ªá th·ªëng ƒëi·ªÅu h√≤a',
        location: 'T·∫ßng 2, ph√≠a T√¢y',
        floor: '2',
        building: 'T√≤a E',
        capacity: 10,
        status: RoomStatus.maintenance,
        amenities: [
          RoomAmenity.wifi,
          RoomAmenity.whiteboard,
          RoomAmenity.powerOutlet,
          // Kh√¥ng c√≥ ƒëi·ªÅu h√≤a v√¨ ƒëang b·∫£o tr√¨
        ],
        qrCode: 'ROOM_E1_006',
        area: 25.0,
        photoUrl: '',
        photos: [],
        settings: {
          'preferredTemperature': 25,
          'lightingLevel': 'medium',
          'soundProofing': false,
        },
        createdAt: now,
        updatedAt: now,
        lastMaintenanceDate: now.subtract(const Duration(days: 30)),
        nextMaintenanceDate: now.add(const Duration(days: 7)),
        createdBy: currentUser.id,
        updatedBy: currentUser.id,
        isActive: true,
        additionalData: {
          'roomType': 'standard_meeting',
          'isTemplate': false,
          'setupBy': 'system_default',
          'maintenanceIssue': 'Air conditioning system needs repair',
        },
      ),
    ];
  }

  /// T·∫°o maintenance records m·∫´u
  static Future<void> setupSampleMaintenanceRecords(
      UserModel currentUser) async {
    try {
      print('üîß T·∫°o l·ªãch s·ª≠ b·∫£o tr√¨ m·∫´u...');

      List<MaintenanceRecord> sampleRecords = [
        MaintenanceRecord(
          id: 'maint_001',
          roomId: 'room_maintenance_demo',
          type: MaintenanceType.repair,
          priority: MaintenancePriority.high,
          title: 'S·ª≠a ch·ªØa h·ªá th·ªëng ƒëi·ªÅu h√≤a',
          description: 'ƒêi·ªÅu h√≤a kh√¥ng ho·∫°t ƒë·ªông, c·∫ßn thay th·∫ø linh ki·ªán',
          technician: 'Nguy·ªÖn VƒÉn A',
          scheduledDate: DateTime.now().add(const Duration(days: 3)),
          cost: 2500000,
          status: 'scheduled',
          additionalData: {
            'createdBy': currentUser.id,
            'priority': 'high',
            'estimatedHours': 4,
          },
        ),
        MaintenanceRecord(
          id: 'maint_002',
          roomId: 'room_large_01',
          type: MaintenanceType.routine,
          priority: MaintenancePriority.medium,
          title: 'B·∫£o tr√¨ ƒë·ªãnh k·ª≥ h·ªá th·ªëng √¢m thanh',
          description: 'Ki·ªÉm tra v√† v·ªá sinh h·ªá th·ªëng √¢m thanh ƒë·ªãnh k·ª≥',
          technician: 'Tr·∫ßn Th·ªã B',
          scheduledDate: DateTime.now().subtract(const Duration(days: 7)),
          completedDate: DateTime.now().subtract(const Duration(days: 5)),
          cost: 500000,
          status: 'completed',
          additionalData: {
            'createdBy': currentUser.id,
            'priority': 'medium',
            'completedBy': currentUser.id,
          },
        ),
      ];

      for (MaintenanceRecord record in sampleRecords) {
        await _firestore
            .collection('maintenance_records')
            .doc(record.id)
            .set(record.toMap());
        print('‚úÖ ƒê√£ t·∫°o maintenance record: ${record.title}');
      }

      print('üéâ Ho√†n th√†nh t·∫°o maintenance records m·∫´u!');
    } catch (e) {
      print('‚ùå L·ªói t·∫°o maintenance records: $e');
    }
  }

  /// T·∫°o room templates cho user t·ª± ch·ªçn
  static List<Map<String, dynamic>> getRoomTemplates() {
    return [
      {
        'id': 'template_small',
        'name': 'Ph√≤ng h·ªçp nh·ªè',
        'description': 'D√†nh cho 4-8 ng∆∞·ªùi',
        'capacity': 6,
        'amenities': [
          RoomAmenity.wifi,
          RoomAmenity.whiteboard,
          RoomAmenity.monitor,
          RoomAmenity.airConditioner,
        ],
        'suggestedArea': 15.0,
        'icon': 'üè¢',
      },
      {
        'id': 'template_medium',
        'name': 'Ph√≤ng h·ªçp trung b√¨nh',
        'description': 'D√†nh cho 8-15 ng∆∞·ªùi',
        'capacity': 12,
        'amenities': [
          RoomAmenity.wifi,
          RoomAmenity.projector,
          RoomAmenity.microphone,
          RoomAmenity.speaker,
          RoomAmenity.airConditioner,
          RoomAmenity.videoConference,
        ],
        'suggestedArea': 30.0,
        'icon': 'üèõÔ∏è',
      },
      {
        'id': 'template_large',
        'name': 'H·ªôi tr∆∞·ªùng',
        'description': 'D√†nh cho 20+ ng∆∞·ªùi',
        'capacity': 50,
        'amenities': [
          RoomAmenity.wifi,
          RoomAmenity.projector,
          RoomAmenity.microphone,
          RoomAmenity.speaker,
          RoomAmenity.camera,
          RoomAmenity.monitor,
          RoomAmenity.airConditioner,
          RoomAmenity.videoConference,
        ],
        'suggestedArea': 80.0,
        'icon': 'üèüÔ∏è',
      },
      {
        'id': 'template_training',
        'name': 'Ph√≤ng ƒë√†o t·∫°o',
        'description': 'D√†nh cho workshop v√† training',
        'capacity': 20,
        'amenities': [
          RoomAmenity.wifi,
          RoomAmenity.projector,
          RoomAmenity.whiteboard,
          RoomAmenity.flipChart,
          RoomAmenity.airConditioner,
        ],
        'suggestedArea': 50.0,
        'icon': 'üìö',
      },
      {
        'id': 'template_vip',
        'name': 'Ph√≤ng VIP',
        'description': 'Ph√≤ng cao c·∫•p cho kh√°ch VIP',
        'capacity': 8,
        'amenities': RoomAmenity.values, // T·∫•t c·∫£ ti·ªán √≠ch
        'suggestedArea': 40.0,
        'icon': 'üëë',
      },
    ];
  }

  /// Ki·ªÉm tra xem ƒë√£ setup ch∆∞a
  static Future<bool> isRoomsSetupCompleted() async {
    try {
      QuerySnapshot snapshot =
          await _firestore.collection('rooms').limit(1).get();
      return snapshot.docs.isNotEmpty;
    } catch (e) {
      print('‚ùå L·ªói ki·ªÉm tra setup rooms: $e');
      return false;
    }
  }

  /// X√≥a t·∫•t c·∫£ ph√≤ng (ch·ªâ d√πng ƒë·ªÉ reset)
  static Future<void> resetAllRooms(UserModel currentUser) async {
    try {
      if (!currentUser.isAdmin) {
        throw Exception('Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn reset ph√≤ng');
      }

      print('üóëÔ∏è ƒêang x√≥a t·∫•t c·∫£ ph√≤ng...');

      QuerySnapshot snapshot = await _firestore.collection('rooms').get();
      WriteBatch batch = _firestore.batch();

      for (QueryDocumentSnapshot doc in snapshot.docs) {
        batch.delete(doc.reference);
      }

      await batch.commit();
      print('‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ ph√≤ng');

      // X√≥a maintenance records
      QuerySnapshot maintenanceSnapshot =
          await _firestore.collection('maintenance_records').get();
      WriteBatch maintenanceBatch = _firestore.batch();

      for (QueryDocumentSnapshot doc in maintenanceSnapshot.docs) {
        maintenanceBatch.delete(doc.reference);
      }

      await maintenanceBatch.commit();
      print('‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ maintenance records');
    } catch (e) {
      print('‚ùå L·ªói reset rooms: $e');
      rethrow;
    }
  }

  /// Export c·∫•u h√¨nh ph√≤ng
  static Map<String, dynamic> exportRoomsConfig(List<RoomModel> rooms) {
    return {
      'version': '1.0',
      'exportDate': DateTime.now().toIso8601String(),
      'totalRooms': rooms.length,
      'rooms': rooms.map((room) => room.toMap()).toList(),
    };
  }

  /// Import c·∫•u h√¨nh ph√≤ng
  static List<RoomModel> importRoomsConfig(Map<String, dynamic> config) {
    try {
      List<dynamic> roomsData = config['rooms'] ?? [];
      return roomsData.map((data) => RoomModel.fromMap(data)).toList();
    } catch (e) {
      throw Exception('L·ªói import config: $e');
    }
  }
}
